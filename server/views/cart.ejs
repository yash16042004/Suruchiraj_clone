<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f8f9fa;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px 0;
            margin-bottom: 30px;
            border-radius: 10px;
            text-align: center;
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
        }

        .header p {
            font-size: 1.1rem;
            opacity: 0.9;
        }

        .cart-container {
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .cart-header {
            background: #f8f9fa;
            padding: 20px;
            border-bottom: 1px solid #e9ecef;
            display: grid;
            grid-template-columns: 2fr 1fr 1fr 1fr 0.5fr;
            gap: 20px;
            font-weight: bold;
            color: #495057;
        }

        .cart-item {
            display: grid;
            grid-template-columns: 2fr 1fr 1fr 1fr 0.5fr;
            gap: 20px;
            padding: 20px;
            border-bottom: 1px solid #e9ecef;
            align-items: center;
            transition: background-color 0.3s ease;
        }

        .cart-item:hover {
            background-color: #f8f9fa;
        }

        .product-info {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .product-image {
            width: 60px;
            height: 60px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 1.2rem;
        }

        .product-details h3 {
            color: #495057;
            margin-bottom: 5px;
        }

        .product-details p {
            color: #6c757d;
            font-size: 0.9rem;
        }

        .quantity-controls {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .quantity-btn {
            width: 35px;
            height: 35px;
            border: none;
            background: #007bff;
            color: white;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1.1rem;
            transition: background-color 0.3s ease;
        }

        .quantity-btn:hover {
            background: #0056b3;
        }

        .quantity-input {
            width: 50px;
            height: 35px;
            text-align: center;
            border: 1px solid #ced4da;
            border-radius: 5px;
            font-size: 1rem;
        }

        .price {
            font-weight: bold;
            color: #28a745;
            font-size: 1.1rem;
        }

        .remove-btn {
            background: #dc3545;
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .remove-btn:hover {
            background: #c82333;
        }

        .cart-summary {
            background: #f8f9fa;
            padding: 30px;
            border-top: 1px solid #e9ecef;
        }

        .summary-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 15px;
            font-size: 1.1rem;
        }

        .total-row {
            border-top: 2px solid #dee2e6;
            padding-top: 15px;
            font-size: 1.3rem;
            font-weight: bold;
            color: #495057;
        }

        .cart-actions {
            display: flex;
            gap: 15px;
            margin-top: 20px;
        }

        .btn {
            padding: 12px 25px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background: #545b62;
        }

        .btn-danger {
            background: #dc3545;
            color: white;
        }

        .btn-danger:hover {
            background: #c82333;
        }

        .empty-cart {
            text-align: center;
            padding: 60px 20px;
            color: #6c757d;
        }

        .empty-cart h2 {
            margin-bottom: 20px;
            color: #495057;
        }

        .empty-cart p {
            margin-bottom: 30px;
            font-size: 1.1rem;
        }

        .loading {
            text-align: center;
            padding: 40px;
            color: #6c757d;
        }

        .success-message {
            background: #d4edda;
            color: #155724;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border: 1px solid #c3e6cb;
        }

        .error-message {
            background: #f8d7da;
            color: #721c24;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border: 1px solid #f5c6cb;
        }

        @media (max-width: 768px) {
            .cart-header, .cart-item {
                grid-template-columns: 1fr;
                gap: 10px;
            }
            
            .cart-header {
                display: none;
            }
            
            .product-info {
                justify-content: center;
            }
            
            .quantity-controls {
                justify-content: center;
            }
            
            .cart-actions {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ðŸ›’ Shopping Cart</h1>
            <p>Welcome back, <%= user.name %>!</p>
        </div>

        <div id="message-container"></div>

        <div class="cart-container">
            <div id="cart-content">
                <div class="loading">
                    <h3>Loading your cart...</h3>
                </div>
            </div>
        </div>
    </div>

    <script>
        let cartData = null;

        // Load cart data on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadCart();
        });

        // Function to load cart data
        async function loadCart() {
            try {
                const response = await fetch('/cart/api/cart');
                const data = await response.json();
                
                if (data.success) {
                    cartData = data.cart;
                    renderCart();
                } else {
                    showMessage('Error loading cart', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showMessage('Error loading cart', 'error');
            }
        }

        // Function to render cart
        function renderCart() {
            const cartContent = document.getElementById('cart-content');
            
            if (!cartData || cartData.items.length === 0) {
                cartContent.innerHTML = `
                    <div class="empty-cart">
                        <h2>Your cart is empty</h2>
                        <p>Looks like you haven't added any items to your cart yet.</p>
                        <a href="/products" class="btn btn-primary">Continue Shopping</a>
                    </div>
                `;
                return;
            }

            let cartHTML = `
                <div class="cart-header">
                    <div>Product</div>
                    <div>Price</div>
                    <div>Quantity</div>
                    <div>Total</div>
                    <div></div>
                </div>
            `;

            cartData.items.forEach(item => {
                cartHTML += `
                    <div class="cart-item" data-price-id="${item.priceId}">
                        <div class="product-info">
                            <div class="product-image">${item.productName.charAt(0)}</div>
                            <div class="product-details">
                                <h3>${item.productName}</h3>
                                <p>Price ID: ${item.priceId}</p>
                            </div>
                        </div>
                        <div class="price">$${item.price}</div>
                        <div class="quantity-controls">
                            <button class="quantity-btn" onclick="updateQuantity('${item.priceId}', ${item.quantity - 1})">-</button>
                            <input type="number" class="quantity-input" value="${item.quantity}" min="1" 
                                   onchange="updateQuantity('${item.priceId}', this.value)">
                            <button class="quantity-btn" onclick="updateQuantity('${item.priceId}', ${item.quantity + 1})">+</button>
                        </div>
                        <div class="price">$${(item.price * item.quantity).toFixed(2)}</div>
                        <div>
                            <button class="remove-btn" onclick="removeItem('${item.priceId}')">Ã—</button>
                        </div>
                    </div>
                `;
            });

            cartHTML += `
                <div class="cart-summary">
                    <div class="summary-row">
                        <span>Subtotal:</span>
                        <span>$${cartData.totalAmount.toFixed(2)}</span>
                    </div>
                    <div class="summary-row total-row">
                        <span>Total:</span>
                        <span>$${cartData.totalAmount.toFixed(2)}</span>
                    </div>
                    <div class="cart-actions">
                        <a href="/products" class="btn btn-secondary">Continue Shopping</a>
                        <button class="btn btn-danger" onclick="clearCart()">Clear Cart</button>
                        <button class="btn btn-primary" onclick="proceedToCheckout()">Proceed to Checkout</button>
                    </div>
                </div>
            `;

            cartContent.innerHTML = cartHTML;
        }

        // Function to update quantity
        async function updateQuantity(priceId, quantity) {
            try {
                const response = await fetch('/cart/api/cart/update', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ priceId, quantity: parseInt(quantity) })
                });

                const data = await response.json();
                
                if (data.success) {
                    cartData = data.cart;
                    renderCart();
                    showMessage('Cart updated successfully', 'success');
                } else {
                    showMessage(data.error || 'Error updating cart', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showMessage('Error updating cart', 'error');
            }
        }

        // Function to remove item
        async function removeItem(priceId) {
            if (!confirm('Are you sure you want to remove this item?')) {
                return;
            }

            try {
                const response = await fetch(`/cart/api/cart/remove/${priceId}`, {
                    method: 'DELETE'
                });

                const data = await response.json();
                
                if (data.success) {
                    cartData = data.cart;
                    renderCart();
                    showMessage('Item removed from cart', 'success');
                } else {
                    showMessage(data.error || 'Error removing item', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showMessage('Error removing item', 'error');
            }
        }

        // Function to clear cart
        async function clearCart() {
            if (!confirm('Are you sure you want to clear your entire cart?')) {
                return;
            }

            try {
                const response = await fetch('/cart/api/cart/clear', {
                    method: 'DELETE'
                });

                const data = await response.json();
                
                if (data.success) {
                    cartData = data.cart;
                    renderCart();
                    showMessage('Cart cleared successfully', 'success');
                } else {
                    showMessage(data.error || 'Error clearing cart', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showMessage('Error clearing cart', 'error');
            }
        }

        // Function to proceed to checkout
        function proceedToCheckout() {
            // Redirect to checkout page or implement checkout logic
            window.location.href = '/checkout';
        }

        // Function to show messages
        function showMessage(message, type) {
            const messageContainer = document.getElementById('message-container');
            const messageClass = type === 'success' ? 'success-message' : 'error-message';
            
            messageContainer.innerHTML = `<div class="${messageClass}">${message}</div>`;
            
            // Auto-hide message after 3 seconds
            setTimeout(() => {
                messageContainer.innerHTML = '';
            }, 3000);
        }
    </script>
</body>
</html> 